<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Why playing lottery when you can try guessing Bitcoin private keys?</title>
    <link rel="stylesheet" href="css/style.css">
    <link href="https://fonts.googleapis.com/css?family=EB+Garamond&display=swap" rel="stylesheet">
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-51333035-2"></script>
    <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());
    gtag('config', 'UA-51333035-2');
    </script>
  </head>
  <body>
    <div id="outer">
      <div id="content">
        <p><a href="https://scorta.github.io/">HOME</a> | <a href="https://scorta.github.io/GuessPrivateKey/">Guess The (Bitcoin) Private Key</a><br>This program searches Private Key(s) for given Bitcoin address(es)</p>
        <hr><p><strong>DOWNLOAD</strong><br>
          <strong><a href="https://github.com/scorta/GuessPrivateKey/">Github page</a><br>
          <a href="https://github.com/scorta/GuessPrivateKey/releases/tag/0.15">Release (v0.15)</a></strong></p>
          <hr><p><strong>HOW DOES IT DO?</strong>
            <br>This program generates random Bitcoin Private Key, then check if it is the key for given address(es).
            <br>A Bitcoin Private Key is an integer between 1 and ~10<sup>77</sup>, so to <strong>find</strong> a Private Key for a given address, we <strong>just</strong> need to generate a number in that range, and check if it is the key for that address. Sounds easy, right?
            <br>But the problem is, 10<sup>77</sup> is a big number. A really really big number (to compare, the total number of atoms in observable universe is about 10<sup>82</sup>). If you are able to check a quintillion keys (10<sup>18</sup>) per second, you still need 3 170 979 198 376 458 650 431 253 170 979 198 376 458 650 431 253 170 years to check all the possible Bitcoin keys.
            <br>But if you are an extremely lucky person, or you have some quantum computers at home, then you could try.
            <br>Just in case you are serious about finding a key for a Bitcoin address with positive balance, you may want to try <a href="https://lbc.cryptoguru.org/about">Large Bitcoin Collider</a>
            <br><a href="https://www.deepdotweb.com/2017/06/09/bitcoin-brain-wallets-hackers-heaven/">And there was much more efficient way to find a Private Key</a>, but I am afraid that hackers have done long before.
          </p>
          <hr><p><strong>ROOM FOR IMPROVEMENT</strong>
            <br><a href="https://developer.nvidia.com/how-to-cuda-c-cpp">Use GPU for calculation</a>. GPU may work much faster for this kind of task, but this program need to be rewritten in C, C++, Fortran or Python. Java could do the work, but I doubt if it is a good choice.
          </p>
          <hr><p><strong>USAGE</strong>
            <br>Install java on your computer, download the <a href="https://github.com/scorta/GuessPrivateKey/releases/tag/0.1">GuessPrivateKey.jar</a> file, then enter this command:
          <pre><code>$java -jar {this_program} {numbers of threads} {file_contains_bitcoin_addresses} {choice} {start_from}</code></pre>
          <strong>Parameters:</strong>
          <br><code>{numbers of threads}</code>: number of threads, should be equal to your CPU cores (or less, if you want to use it for other tasks). Eg. my CPU has 8 cores, so I set <code>{numbers of threads}</code> to 8.
          <br><code>{choice}</code>: <code>random</code> means guessing keys randomly; <code>up</code> means checking for <code>{start_from}</code> and upper. <code>down</code> means going down from <code>{start_from}</code>.
          <br><code>{start_from}</code>: Starting number. Default value is 0.
          <br><strong>Sample commands:</strong>
        <pre><code>$java -jar GuessPrivateKey.jar 7 bit.txt<br># 7 threads, searching randomly for list of address(es) in the file bit.txt</code></pre>
      <pre><code>$java -jar GuessPrivateKey.jar 8 bit.txt up 666<br># 8 threads, searching sequentially from 666 and upper for list of address(es) in the file bit.txt.</code></pre>
      If you have a big list of Bitcoin addresses (like, millions), you may need to use the <code>-Xmx</code> option.
    </p>
    <hr><p><strong>OUTPUT</strong>
      <br>If found a key, the program will display a message <code>"Found a key!!!"</code>, and print info to a file, which has the same name to that WIF key.
      <br>Eg. if it found the key <code>"L59eMgqKqxCGXrDWhGwVBZbQBra482LRLzyAj6g5CGKdq6ABCvXz"</code>, it will create a file name <code>"L59eMgqKqxCGXrDWhGwVBZbQBra482LRLzyAj6g5CGKdq6ABCvXz.txt"</code> and write these info into it:
    <pre><code>1zJBmcSDHZ97Sjm6TmtM5M7ZdPzuiBABm //address<br>L59eMgqKqxCGXrDWhGwVBZbQBra482LRLzyAj6g5CGKdq6ABCvXz //key in WIF format<br>EC9B83954E3E5001E34B02A1705779D2B59264BB54784815B3AA3EBC10C622F0 //key in HEX format</code></pre>
    So if you find a new .txt file in the same folder with this program, you have found a wallet!
    <br>Note: if it cannot create file(s), it will print these info directly into the screen.
  </p>
  <hr><p><strong>HARMLESS ERRORS</strong>
    <br>The program may give you the following error:
  <pre>SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".<br>SLF4J: Defaulting to no-operation (NOP) logger implementation<br>SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.</pre>
  <strong>Do not worry!</strong> It is just an harmless error from the library bitcoinj. The program will still run fine.
  </p>

  <hr><p><strong>Compile yourself?</strong>
    <br>This program uses <a href="https://bitcoinj.github.io/">bitcoinj library</a>, so please remember to include it.
  </p>

  <hr><p><strong>Tip?</strong>
    <pre><code>BTC: 169HJrugesvXG4K7CHmoTqGruY6pKEaMWW<br>ETH: 0x573c8408d1b5a1fdec8f2bbfe206cd954977cbdd<br>LTC: LhYQgMpRtY3zGJAvFwmGa5oKMedYmHA7eW<br>XMR: 43WctRoNBr6RZHNXRMwrVR4Netem37P43Y9DWdeFpcqaRwqZKppeN5ZhEp4wvsj4W7UrfbXCcPNJ2PfdbfkaWuLz4D89nvZ</code></pre>
    <br>Thank you so much :)
  </p>
</div>
</div>
</body>
</html>
